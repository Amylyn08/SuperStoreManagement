--Amy Nguyen,Bianca Rossetti

DROP TABLE Employees;
DROP TABLE Orders_Products ;
DROP TABLE Stores_Products;
DROP TABLE Warehouses_Products;
DROP TABLE Warehouses_Stores;
DROP TABLE Reviews;
DROP TABLE Orders;
DROP TABLE Customers;
DROP TABLE Products;
DROP TABLE Warehouses;
DROP TABLE Stores;

CREATE TABLE Stores(
    storeID NUMBER(2) GENERATED BY DEFAULT AS IDENTITY CONSTRAINT store_pk PRIMARY KEY,
    name VARCHAR2(20) NOT NULL
);

CREATE TABLE Warehouses(
    warehouseID      NUMBER(2)   GENERATED BY DEFAULT AS IDENTITY CONSTRAINT warehouse_pk PRIMARY KEY,
    name             VARCHAR2(20) NOT NULL,
    streetAddress    VARCHAR2(40),
    city             VARCHAR2(40),
    province         VARCHAR2(40),
    country          VARCHAR2(40)
);

CREATE TABLE Warehouses_Stores(
    warehouseID NUMBER(2)   REFERENCES Warehouses(warehouseID) ON DELETE CASCADE NOT NULL ,
    storeID     NUMBER(2)   REFERENCES Stores(storeID) ON DELETE CASCADE NOT NULL
);

CREATE TABLE Products(
    productID   NUMBER(2)   GENERATED BY DEFAULT AS IDENTITY CONSTRAINT products_pk PRIMARY KEY,
    name        VARCHAR2(20) NOT NULL,
    category    VARCHAR2(20) NOT NULL
);

CREATE TABLE Warehouses_Products(
    warehouseID     NUMBER(2)   REFERENCES Warehouses(warehouseID) ON DELETE CASCADE NOT NULL,
    productID       NUMBER(2)   REFERENCES Products(productID) ON DELETE CASCADE NOT NULL,
    quantity        NUMBER(6)   NOT NULL
);

CREATE TABLE Stores_Products(
    storeID         NUMBER(2)   REFERENCES Stores(storeID) ON DELETE CASCADE NOT NULL,
    productID       NUMBER(2)   REFERENCES Products(productID) ON DELETE CASCADE NOT NULL,
    price           NUMBER(8,2) NOT NULL
);

CREATE TABLE Customers(
    customerID       NUMBER(2)   GENERATED BY DEFAULT AS IDENTITY CONSTRAINT customers_pk PRIMARY KEY,
    firstName        VARCHAR2(40) NOT NULL,
    lastName         VARCHAR2(20) NOT NULL,
    email            VARCHAR2(30) NOT NULL,
    streetAddress    VARCHAR2(40),
    city             VARCHAR2(40),
    province         VARCHAR2(40),
    country          VARCHAR2(40)
);

CREATE TABLE Orders(
    orderID         NUMBER(2)   GENERATED BY DEFAULT AS IDENTITY CONSTRAINT orders_pk PRIMARY KEY,
    customerID      NUMBER(2)   REFERENCES Customers(customerID) ON DELETE CASCADE NOT NULL,
    storeID         NUMBER(2)   REFERENCES Stores(storeID) ON DELETE CASCADE NOT NULL,
    orderDate       DATE
);

CREATE TABLE Orders_Products(
    orderID         NUMBER(2)   REFERENCES Orders(orderID) ON DELETE CASCADE NOT NULL,
    productID       NUMBER(2)   REFERENCES Products(productID) ON DELETE CASCADE NOT NULL,
    quantity        NUMBER(6)   NOT NULL
);

CREATE TABLE Reviews(
    reviewID        NUMBER(2)   GENERATED BY DEFAULT AS IDENTITY CONSTRAINT reviews_pk PRIMARY KEY,
    productID       NUMBER(2)   REFERENCES Products(productID) ON DELETE CASCADE NOT NULL,
	customerID  	NUMBER(2) 	REFERENCES Customers(customerID) ON DELETE CASCADE NOT NULL,
    star            NUMBER(1),
    flagNums        NUMBER(1),
    description     VARCHAR2(100)
);

CREATE TABLE LogOrderModification(
    orderID             NUMBER(2)       NOT NULL,
    customerID          NUMBER(2)       NOT NULL,
    storeID             NUMBER(2)       NOT NULL,
    modificationDate    DATE            NOT NULL,
    modificationType    VARCHAR2(20)    NOT NULL
);

CREATE TABLE LogReviewModification(
    reviewID            NUMBER(2)       NOT NULL,
    productID           NUMBER(2)       NOT NULL,
	customerID  	    NUMBER(2)       NOT NULL,
    star                NUMBER(1),
    flagNums            NUMBER(1),
    description         VARCHAR2(100),
    modificationDate    DATE            NOT NULL,
    modificationType    VARCHAR2(20)    NOT NULL
);

/** inserts **/
INSERT INTO Stores (name) 
VALUES ('marche adonis');
INSERT INTO Stores (name) 
VALUES ('marche atwater');
INSERT INTO Stores (name) 
VALUES ('dawson store');
INSERT INTO Stores (name) 
VALUES ('store magic');
INSERT INTO Stores (name) 
VALUES ('movie store');
INSERT INTO Stores (name) 
VALUES ('super rue champlain');
INSERT INTO Stores (name) 
VALUES ('toy r us');
INSERT INTO Stores (name) 
VALUES ('Dealer one');
INSERT INTO Stores (name) 
VALUES ('dealer montreal');
INSERT INTO Stores (name) 
VALUES ('movie start');
INSERT INTO Stores (name) 
VALUES ('star store');

INSERT INTO Warehouses (name, streetAddress, city, province, country) 
VALUES ('Warehouse A', '100 rue William', 'Saint Laurent', 'Quebec', 'Canada');
INSERT INTO Warehouses (name, streetAddress, city, province, country) 
VALUES ('Warehouse B', '304 Rue Francois-Perrault', 'Villeray Saint-Michel', 'Quebec', 'Canada');
INSERT INTO Warehouses (name, streetAddress, city, province, country) 
VALUES ('Warehouse C', '86700 Weston Rd', 'Toronto', 'Ontario', 'Canada');
INSERT INTO Warehouses (name, streetAddress, city, province, country) 
VALUES ('Warehouse D', '170 Sideroad', 'Quebec City', 'Quebec', 'Canada');
INSERT INTO Warehouses (name, streetAddress, city, province, country) 
VALUES ('Warehouse E', '1231 Trudea road', 'Ottawa', 'Ontario', 'Canada');
INSERT INTO Warehouses (name, streetAddress, city, province, country) 
VALUES ('Warehouse F', '16 Whitlock Rd', NULL, 'Alberta', 'Canada');

/*warehouses_stores???*/

INSERT INTO Products (name, category) VALUES ('laptop ASUS 104S', 'Electronics');
INSERT INTO Products (name, category) VALUES ('apple', 'Grocery');
INSERT INTO Products (name, category) VALUES ('SIMS CD', 'Video Games');
INSERT INTO Products (name, category) VALUES ('orange', 'Grocery');
INSERT INTO Products (name, category) VALUES ('Barbie Movie', 'DVD');
INSERT INTO Products (name, category) VALUES ('L''Oreal Normal Hair', 'Health');
INSERT INTO Products (name, category) VALUES ('BMW iX Lego', 'Toys');
INSERT INTO Products (name, category) VALUES ('BMW i6', 'Cars');
INSERT INTO Products (name, category) VALUES ('Truck 500c', 'Vehicle');
INSERT INTO Products (name, category) VALUES ('paper towel', 'Beauty');
INSERT INTO Products (name, category) VALUES ('plum', 'Grocery');
INSERT INTO Products (name, category) VALUES ('Lamborghini Lego', 'Toys');
INSERT INTO Products (name, category) VALUES ('chicken', 'Grocery');
INSERT INTO Products (name, category) VALUES ('PS5', 'Electronics');
INSERT INTO Products (name, category) VALUES ('pasta', 'Grocery');
INSERT INTO Products (name, category) VALUES ('tomato', 'Grocery');
INSERT INTO Products (name, category) VALUES ('Train X745', 'Vehicle');

INSERT INTO Warehouses_Products (warehouseID, productID, quantity) VALUES (1, 1, 1000);
INSERT INTO Warehouses_Products (warehouseID, productID, quantity) VALUES (2, 2, 24980);
INSERT INTO Warehouses_Products (warehouseID, productID, quantity) VALUES (3, 3, 103);
INSERT INTO Warehouses_Products (warehouseID, productID, quantity) VALUES (4, 4, 35405);
INSERT INTO Warehouses_Products (warehouseID, productID, quantity) VALUES (5, 5, 40);
INSERT INTO Warehouses_Products (warehouseID, productID, quantity) VALUES (6, 6, 450);
INSERT INTO Warehouses_Products (warehouseID, productID, quantity) VALUES (1, 7, 10);
INSERT INTO Warehouses_Products (warehouseID, productID, quantity) VALUES (1, 8, 6);
INSERT INTO Warehouses_Products (warehouseID, productID, quantity) VALUES (5, 9, 1000);
INSERT INTO Warehouses_Products (warehouseID, productID, quantity) VALUES (6, 10, 3532);
INSERT INTO Warehouses_Products (warehouseID, productID, quantity) VALUES (3, 11, 43242);
INSERT INTO Warehouses_Products (warehouseID, productID, quantity) VALUES (2, 10, 39484);
INSERT INTO Warehouses_Products (warehouseID, productID, quantity) VALUES (4, 11, 6579);
INSERT INTO Warehouses_Products (warehouseID, productID, quantity) VALUES (5, 12, 98765);
INSERT INTO Warehouses_Products (warehouseID, productID, quantity) VALUES (6, 13, 43523);
INSERT INTO Warehouses_Products (warehouseID, productID, quantity) VALUES (1, 15, 2132);
INSERT INTO Warehouses_Products (warehouseID, productID, quantity) VALUES (4, 14, 123);
INSERT INTO Warehouses_Products (warehouseID, productID, quantity) VALUES (1, 16, 352222);
INSERT INTO Warehouses_Products (warehouseID, productID, quantity) VALUES (5, 17, 4543);

INSERT INTO Stores_Products (storeID, productID, price) VALUES (1, 1, 970);
INSERT INTO Stores_Products (storeID, productID, price) VALUES (1, 13, 9.5);
INSERT INTO Stores_Products (storeID, productID, price) VALUES (2, 2, 10);
INSERT INTO Stores_Products (storeID, productID, price) VALUES (3, 3, 50);
INSERT INTO Stores_Products (storeID, productID, price) VALUES (4, 4, 2);
INSERT INTO Stores_Products (storeID, productID, price) VALUES (5, 5, 30);
INSERT INTO Stores_Products (storeID, productID, price) VALUES (6, 6, 10);
INSERT INTO Stores_Products (storeID, productID, price) VALUES (7, 7, 40);
INSERT INTO Stores_Products (storeID, productID, price) VALUES (8, 8, 50000);
INSERT INTO Stores_Products (storeID, productID, price) VALUES (9, 9, 856600);
INSERT INTO Stores_Products (storeID, productID, price) VALUES (10, 10, 50);
INSERT INTO Stores_Products (storeID, productID, price) VALUES (2, 11, 10);
INSERT INTO Stores_Products (storeID, productID, price) VALUES (6, 6, 30);
INSERT INTO Stores_Products (storeID, productID, price) VALUES (7, 12, 80);
INSERT INTO Stores_Products (storeID, productID, price) VALUES (5, 3, 16);
INSERT INTO Stores_Products (storeID, productID, price) VALUES (7, 5, 45);
INSERT INTO Stores_Products (storeID, productID, price) VALUES (1, 13, 9.5);
INSERT INTO Stores_Products (storeID, productID, price) VALUES (2, 15, 13.5);
INSERT INTO Stores_Products (storeID, productID, price) VALUES (11, 14, 200);
INSERT INTO Stores_Products (storeID, productID, price) VALUES (7, 7, 38);
INSERT INTO Stores_Products (storeID, productID, price) VALUES (4, 15, 15);

INSERT INTO Customers (firstName, lastName, email, streetAddress, city, province, country) 
VALUES ('mahsa', 'sadeghi', 'msadeghi@dawsoncollege.qc.ca', 'Dawson College', 'Montreal', 'Quebec', 'Canada');
INSERT INTO Customers (firstName, lastName, email, streetAddress, city, province, country) 
VALUES ('alex', 'brown', 'alex@gmail.com', '090 boul saint laurent', 'Montreal', 'Quebec', 'Canada');
INSERT INTO Customers (firstName, lastName, email, streetAddress, city, province, country) 
VALUES ('martin', 'alexandre', 'marting@yahoo.com', NULL, 'Brossard', 'Quebec', 'Canada');
INSERT INTO Customers (firstName, lastName, email, streetAddress, city, province, country) 
VALUES ('daneil', 'hanne', 'daneil@yahoo.com', '100 Atwater Street', 'Toronto', 'Ontario', 'Canada');
INSERT INTO Customers (firstName, lastName, email, streetAddress, city, province, country) 
VALUES ('martin', 'alexandre', 'marting@yahoo.com', NULL, 'Brossard', 'Quebec', 'Canada');
INSERT INTO Customers (firstName, lastName, email, streetAddress, city, province, country) 
VALUES ('John', 'boura', 'bdoura@gmail.com', '100 Young Street', 'Toronto', 'Ontario', 'Canada');
INSERT INTO Customers (firstName, lastName, email, streetAddress, city, province, country) 
VALUES ('Ari', 'brown', 'b.a@gmail.com', NULL, NULL, NULL, NULL);
INSERT INTO Customers (firstName, lastName, email, streetAddress, city, province, country) 
VALUES ('Amanda', 'Harry', 'am.harry@yahoo.com', '100 boul saint laurent', 'Montreal', 'Quebec', 'Canada');
INSERT INTO Customers (firstName, lastName, email, streetAddress, city, province, country) 
VALUES ('Jack', 'Johnson', 'johnson.a@gmail.com', NULL, 'Calgary', 'Alberta', 'Canada');
INSERT INTO Customers (firstName, lastName, email, streetAddress, city, province, country) 
VALUES ('John', 'belle', 'abcd@yahoo.com', '105 Young Street', 'Toronto', 'Ontario', 'Canada');
INSERT INTO Customers (firstName, lastName, email, streetAddress, city, province, country) 
VALUES ('martin', 'Li', 'm.li@gmail.com', '87 boul saint laurent', 'Montreal', 'Quebec', 'Canada');
INSERT INTO Customers (firstName, lastName, email, streetAddress, city, province, country) 
VALUES ('olivia', 'smith', 'smith@hotmail.com', '76 boul decalthon', 'Laval', 'Quebec', 'Canada');
INSERT INTO Customers (firstName, lastName, email, streetAddress, city, province, country) 
VALUES ('Noah', 'Garcia', 'g.noah@yahoo.com', '22222 Happy Street', 'Laval', 'Quebec', 'Canada');
INSERT INTO Customers (firstName, lastName, email, streetAddress, city, province, country) 
VALUES ('mahsa', 'sadeghi', 'ms@gmail.com', '104 Gill Street', 'Toronto', 'Ontario', 'Canada');

INSERT INTO Orders (customerID, storeID, orderDate) 
VALUES (1, 1, TO_DATE('4/21/2023', 'MM/DD/YYYY'));
INSERT INTO Orders (customerID, storeID, orderDate) 
VALUES (2, 2, TO_DATE('10/23/2023', 'MM/DD/YYYY'));
INSERT INTO Orders (customerID, storeID, orderDate) 
VALUES (3, 3, TO_DATE('10/1/2023', 'MM/DD/YYYY'));
INSERT INTO Orders (customerID, storeID, orderDate) 
VALUES (4, 4, TO_DATE('10/23/2023', 'MM/DD/YYYY'));
INSERT INTO Orders (customerID, storeID, orderDate) 
VALUES (2, 5, TO_DATE('10/23/2023', 'MM/DD/YYYY'));
INSERT INTO Orders (customerID, storeID, orderDate) 
VALUES (3, 6, TO_DATE('10/10/2023', 'MM/DD/YYYY'));
INSERT INTO Orders (customerID, storeID, orderDate) 
VALUES (1, 7, TO_DATE('10/11/2023', 'MM/DD/YYYY'));
INSERT INTO Orders (customerID, storeID, orderDate) 
VALUES (6, 8, NULL);
INSERT INTO Orders (customerID, storeID, orderDate) 
VALUES (7, 9, NULL);
INSERT INTO Orders (customerID, storeID, orderDate) 
VALUES (8, 10, NULL);
INSERT INTO Orders (customerID, storeID, orderDate) 
VALUES (9, 2, TO_DATE('5/6/2020', 'MM/DD/YYYY'));
INSERT INTO Orders (customerID, storeID, orderDate) 
VALUES (3, 6, TO_DATE('9/12/2019', 'MM/DD/YYYY'));
INSERT INTO Orders (customerID, storeID, orderDate) 
VALUES (1, 7, TO_DATE('10/11/2010', 'MM/DD/YYYY'));
INSERT INTO Orders (customerID, storeID, orderDate) 
VALUES (1, 2, TO_DATE('5/6/2022', 'MM/DD/YYYY'));
INSERT INTO Orders (customerID, storeID, orderDate) 
VALUES (14, 7, TO_DATE('10/7/2023', 'MM/DD/YYYY'));
INSERT INTO Orders (customerID, storeID, orderDate) 
VALUES (10, 8, TO_DATE('8/10/2023', 'MM/DD/YYYY'));
INSERT INTO Orders (customerID, storeID, orderDate) 
VALUES (2, 5, TO_DATE('10/23/2023', 'MM/DD/YYYY'));
INSERT INTO Orders (customerID, storeID, orderDate) 
VALUES (2, 7, TO_DATE('10/2/2023', 'MM/DD/YYYY'));
INSERT INTO Orders (customerID, storeID, orderDate) 
VALUES (11, 1, TO_DATE('4/3/2019', 'MM/DD/YYYY'));
INSERT INTO Orders (customerID, storeID, orderDate) 
VALUES (12, 2, TO_DATE('12/29/2021', 'MM/DD/YYYY'));
INSERT INTO Orders (customerID, storeID, orderDate) 
VALUES (13, 11, TO_DATE('1/20/2020', 'MM/DD/YYYY'));
INSERT INTO Orders (customerID, storeID, orderDate) 
VALUES (1, 7, TO_DATE('10/11/2022', 'MM/DD/YYYY'));
INSERT INTO Orders (customerID, storeID, orderDate) 
VALUES (12, 4, TO_DATE('12/29/2021', 'MM/DD/YYYY'));

INSERT INTO Orders_Products (orderID, productID, quantity) VALUES (1, 1, 1);
INSERT INTO Orders_Products (orderID, productID, quantity) VALUES (2, 2, 2);
INSERT INTO Orders_Products (orderID, productID, quantity) VALUES (3, 3, 3);
INSERT INTO Orders_Products (orderID, productID, quantity) VALUES (4, 4, 1);
INSERT INTO Orders_Products (orderID, productID, quantity) VALUES (5, 5, 1);
INSERT INTO Orders_Products (orderID, productID, quantity) VALUES (6, 6, 1);
INSERT INTO Orders_Products (orderID, productID, quantity) VALUES (7, 7, 1);
INSERT INTO Orders_Products (orderID, productID, quantity) VALUES (8, 8, 1);
INSERT INTO Orders_Products (orderID, productID, quantity) VALUES (9, 9, 1);
INSERT INTO Orders_Products (orderID, productID, quantity) VALUES (10, 10, 3);
INSERT INTO Orders_Products (orderID, productID, quantity) VALUES (11, 11, 6);
INSERT INTO Orders_Products (orderID, productID, quantity) VALUES (12, 6, 3);
INSERT INTO Orders_Products (orderID, productID, quantity) VALUES (13, 12, 1);
INSERT INTO Orders_Products (orderID, productID, quantity) VALUES (14, 11, 7);
INSERT INTO Orders_Products (orderID, productID, quantity) VALUES (15, 12, 2);
INSERT INTO Orders_Products (orderID, productID, quantity) VALUES (16, 8, 1);
INSERT INTO Orders_Products (orderID, productID, quantity) VALUES (17, 3, 1);
INSERT INTO Orders_Products (orderID, productID, quantity) VALUES (18, 5, 1);
INSERT INTO Orders_Products (orderID, productID, quantity) VALUES (19, 13, 1);
INSERT INTO Orders_Products (orderID, productID, quantity) VALUES (20, 15, 3);
INSERT INTO Orders_Products (orderID, productID, quantity) VALUES (21, 14, 1);
INSERT INTO Orders_Products (orderID, productID, quantity) VALUES (22, 7, 1);
INSERT INTO Orders_Products (orderID, productID, quantity) VALUES (23, 15, 3);

INSERT INTO Reviews (star, flagNums, description, reviewID, productID, customerID)
VALUES (4, 0, 'It was affordable.', 1, 1, 1);
INSERT INTO Reviews (star, flagNums, description, reviewID, productID, customerID)
VALUES (3, 0, 'Quality was not good', 2, 2, 2);
INSERT INTO Reviews (star, flagNums, description, reviewID, productID, customerID)
VALUES (2, 1, NULL, 3, 3, 3);
INSERT INTO Reviews (star, flagNums, description, reviewID, productID, customerID)
VALUES (5, 0, 'Highly recommend', 4, 4, 4);
INSERT INTO Reviews (star, flagNums, description, reviewID, productID, customerID)
VALUES (1, 0, NULL, 5, 5, 2);
INSERT INTO Reviews (star, flagNums, description, reviewID, productID, customerID)
VALUES (1, 0, 'Did not worth the price', 6, 6, 3);
INSERT INTO Reviews (star, flagNums, description, reviewID, productID, customerID)
VALUES (1, 0, 'Missing some parts', 7, 7, 1);
INSERT INTO Reviews (star, flagNums, description, reviewID, productID, customerID)
VALUES (5, 1, 'Trash', 8, 8, 6);
INSERT INTO Reviews (star, flagNums, description, reviewID, productID, customerID)
VALUES (2, 0, NULL, 9, 9, 7);
INSERT INTO Reviews (star, flagNums, description, reviewID, productID, customerID)
VALUES (5, 0, NULL, 10, 10, 8);
INSERT INTO Reviews (star, flagNums, description, reviewID, productID, customerID)
VALUES (4, 0, NULL, 11, 11, 9);
INSERT INTO Reviews (star, flagNums, description, reviewID, productID, customerID)
VALUES (3, 0, NULL, 12, 6, 3);
INSERT INTO Reviews (star, flagNums, description, reviewID, productID, customerID)
VALUES (1, 0, 'Missing some parts', 13, 12, 1);
INSERT INTO Reviews (star, flagNums, description, reviewID, productID, customerID)
VALUES (4, 0, NULL, 14, 11, 1);
INSERT INTO Reviews (star, flagNums, description, reviewID, productID, customerID)
VALUES (1, 0, 'Great product', 15, 12, 14);
INSERT INTO Reviews (star, flagNums, description, reviewID, productID, customerID)
VALUES (5, 1, 'Bad quality', 16, 8, 10);
INSERT INTO Reviews (star, flagNums, description, reviewID, productID, customerID)
VALUES (1, 0, NULL, 17, 3, 2);
INSERT INTO Reviews (star, flagNums, description, reviewID, productID, customerID)
VALUES (4, 0, NULL, 18, 5, 2);
INSERT INTO Reviews (star, flagNums, description, reviewID, productID, customerID)
VALUES (4, 0, NULL, 19, 13, 11);
INSERT INTO Reviews (star, flagNums, description, reviewID, productID, customerID)
VALUES (5, 0, NULL, 20, 15, 12);
INSERT INTO Reviews (star, flagNums, description, reviewID, productID, customerID)
VALUES (1, 2, 'Worse car I have driven!', 21, 7, 13);
INSERT INTO Reviews (star, flagNums, description, reviewID, productID, customerID)
VALUES (4, 0, NULL, 22, 15, 12);


/
/**BIANCA**/


CREATE OR REPLACE TYPE order_type AS OBJECT(
    customerID      NUMBER(2),
    storeID         NUMBER(2)
);
/
/* this function taks a productid as input and will calculate the total inventory for that product across all tables */
CREATE OR REPLACE FUNCTION totalInventory(productIDsearch Products.productID%TYPE)
RETURN NUMBER
AS
    totalnum NUMBER(10);
BEGIN
    SELECT
        SUM(quantity) INTO totalNum
    FROM
        Warehouses_Products
    WHERE
        productId = productIDsearch;
    RETURN(totalNum);
END;
/

CREATE OR REPLACE PACKAGE calculations AS
    TYPE cus_names IS TABLE OF VARCHAR(100)
    INDEX BY PLS_INTEGER;
    FUNCTION flaggedCustomers RETURN cus_names;
END calculations;
/

CREATE OR REPLACE PACKAGE BODY calculations AS
    FUNCTION flaggedCustomers
    RETURN cus_names
    AS 
        customers cus_names;
    BEGIN
        SELECT
            firstName || ' ' || lastName BULK COLLECT INTO customers
        FROM
            Customers INNER JOIN Reviews
            USING(customerID)
        WHERE
            flagNums IS NOT NULL AND
            flagNums > 0;
        RETURN(customers);
    END;
END calculations;
/

CREATE OR REPLACE PROCEDURE checkIfOrderStillValid(newOrderID IN Orders.orderID%TYPE)
AS
    numOrders NUMBER(2);
BEGIN
    SELECT
        COUNT(*) INTO numOrders
    FROM
        Orders_Products
    WHERE
        orderID = newOrderID;
    IF numOrders IS NULL OR numOrders = 0 THEN
        DELETE FROM Orders WHERE orderID = newOrderID;
    END IF;
END;
/

BEGIN
    checkIfOrderStillValid(26);
END;
/
/* createOrder (orderID OUT, storeID, cusID): function that takes as input storeID and customerID */
CREATE OR REPLACE PROCEDURE createOrder(
orderObj IN order_type, 
newOrderID OUT Orders.orderID%TYPE)
AS
BEGIN
    
    INSERT INTO Orders (customerID, storeID, orderDate)
    VALUES (orderObj.customerID, orderObj.storeID, CURRENT_DATE)
    RETURNING orderID INTO newOrderID;
END;
/

/* addOrderItem(orderID -> from CreateOrder, prodID, quantity ): in jdbc, use a loop to call addOrderItem for every product they add to their order 
this procedure will add a new order item into the database */
CREATE OR REPLACE PROCEDURE addOrderItem(
    newOrderID IN Orders_Products.orderID%TYPE,
    newProductID IN Orders_Products.productID%TYPE,
    newQuantity IN OUT Orders_Products.quantity%TYPE)
AS
    numTotalProducts NUMBER;
    notEnoughStock EXCEPTION;
    PRAGMA EXCEPTION_INIT(notEnoughStock, -20001);
BEGIN
    SELECT
        SUM(quantity) INTO numTotalProducts
    FROM
        Warehouses_Products
    WHERE
        productID = newProductID;
    IF numTotalProducts < newQuantity THEN
        RAISE_APPLICATION_ERROR( -20001, 'This product does not have enough stock.' );
    END IF;
    
    FOR warehouse IN (SELECT * FROM Warehouses_Products WHERE productID = newProductID) LOOP
        IF warehouse.quantity >= newQuantity THEN
            UPDATE Warehouses_Products SET quantity = warehouse.quantity - newQuantity 
            WHERE warehouseID = warehouse.warehouseID;
            CONTINUE;
        ELSIF warehouse.quantity < newQuantity THEN
            newQuantity := newQuantity - warehouse.quantity;
            UPDATE Warehouses_Products SET quantity = 0 
            WHERE warehouseID = warehouse.warehouseID;
        END IF;
    END LOOP;
    INSERT INTO Orders_Products
    VALUES(newOrderID, newProductID, newQuantity);
EXCEPTION
    WHEN notEnoughStock THEN
        dbms_output.put_line('This product does not have any stock left: ' || SQLERRM);
        RAISE;
    WHEN OTHERS THEN
        dbms_output.put_line('Something went wrong, see block' || SQLERRM);
        RAISE;
END;
/

/* this procedure takes an old productID and will remove it from the database */
CREATE OR REPLACE PROCEDURE removeProduct(oldProductID IN Products.productID%TYPE)
AS
BEGIN
   DELETE FROM Products WHERE productID = oldProductID; 
END;
/

/* this trigger logs any orders that have been added into the LogOrderModification table */
CREATE TRIGGER  After_OrderModification_Insert
AFTER INSERT
ON Orders
FOR EACH ROW
BEGIN
    INSERT INTO LogOrderModification 
    VALUES(:NEW.orderID, :NEW.CustomerID, :NEW.StoreID, CURRENT_DATE, 'INSERT');
END;
/

/* this trigger logs any reviews that have been added or deleted into the LogReviewModification table */
CREATE OR REPLACE TRIGGER  Before_ReviewDelete_Delete
BEFORE DELETE OR INSERT
ON Reviews
FOR EACH ROW
BEGIN
    IF DELETING THEN
        INSERT INTO LogReviewModification 
        VALUES(:OLD.reviewID, :OLD.ProductID, :OLD.CustomerID, :OLD.star, :OLD.flagNums, :OLD.description, CURRENT_DATE, 'DELETE');
    ELSIF INSERTING THEN
        INSERT INTO LogReviewModification 
        VALUES(:NEW.reviewID, :NEW.ProductID, :NEW.CustomerID, :NEW.star, :NEW.flagNums, :NEW.description, CURRENT_DATE, 'INSERT');
    END IF;
END;
/


/****/


/**AMY**/

/**
*
*/
CREATE OR REPLACE FUNCTION numOrders(fproductID Products.productid%TYPE) RETURN NUMBER 
    AS
        results NUMBER(3);
    BEGIN 
        SELECT COUNT(orderid) INTO results 
            FROM Orders_products
            WHERE productid = fproductID;
    
        RETURN results;
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('something went wrong');
            RAISE;
    END;
/
/**
*This function calculates the average score of a product.
*returns the average
*/
CREATE OR REPLACE FUNCTION calculateAvgReviewScore(fproductID Reviews.productid%TYPE) RETURN NUMBER
    AS
        averageScore NUMBER(4,2);
    BEGIN
        SELECT AVG(star) INTO averageScore 
            FROM Reviews 
            WHERE productid = fproductID;
        
        RETURN averageScore;
    
    EXCEPTION 
        WHEN OTHERS THEN 
            dbms_output.put_line('something went wrong' || SQLERRM);
    END;

/
/**
*Takes the reviewID, adds  1  to the current flagNums 
*Valdation: if flagNum >=2, delete row with that reviewID
*
**/
CREATE OR REPLACE PROCEDURE flagReview(pReviewID Reviews.reviewid%TYPE) 
    AS
        oldFlagNum NUMBER(2) := 0;
    BEGIN
        SELECT flagnums INTO oldFlagNum
        FROM Reviews
        WHERE reviewid = pReviewID;
        
        oldFlagNum := oldFlagNum + 1;
        
        IF (oldFlagNum >= 2) THEN
            DELETE FROM Reviews WHERE reviewid = pReviewID;
        ELSE
            UPDATE Reviews SET flagnums = oldFlagNum
            WHERE reviewid = pReviewID;
        END IF;
        
    EXCEPTION 
        WHEN OTHERS THEN 
            dbms_output.put_line('something went wrong' || SQLERRM);
        RAISE;
        
    END;
/

/**proceudre createReview(reviewObj) --> 
 INSERT INTO REVIEWS (VALUES) (reviewobj.customerId)**/
 
/**
*This procedure deletes a warehouse when taken in a warehouseid 
*/
CREATE OR REPLACE PROCEDURE removeWarehouse(pWarehouseID Warehouses.warehouseid%TYPE)
    AS
    
    BEGIN
        DELETE FROM Warehouses WHERE warehouseid = pWarehouseID;
        
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('something went wrong');
    END;
/

/****/

/** getting table IDs **/
CREATE OR REPLACE TYPE array_ids IS TABLE OF NUMBER(2);
/

/** this function will return a list containing all valid product IDs **/
CREATE OR REPLACE FUNCTION getProductIDs
RETURN array_ids
AS
    prod_ids array_ids;
BEGIN
    SELECT
        productID BULK COLLECT INTO prod_ids
    FROM
        Products;
    RETURN prod_ids;
END;
/

/** this function will return a list containing all valid customer IDs **/
CREATE OR REPLACE FUNCTION getCustomerIDs
RETURN array_ids
AS
    cus_ids array_ids;
BEGIN
    SELECT
        customerID BULK COLLECT INTO cus_ids
    FROM
        Customers;
    RETURN cus_ids;
END;
/

/** this function will return a list containing all valid warehouse IDs **/
CREATE OR REPLACE FUNCTION getWarehouseIDs
RETURN array_ids
AS
    warehouse_ids array_ids;
BEGIN
    SELECT
        warehouseID BULK COLLECT INTO warehouse_ids
    FROM
        Warehouses;
    RETURN warehouse_ids;
END;
/

/** this function will return a list containing all valid store IDs **/
CREATE OR REPLACE FUNCTION getStoreIDs
RETURN array_ids
AS
    store_ids array_ids;
BEGIN
    SELECT
        storeID BULK COLLECT INTO store_ids
    FROM
        Stores;
    RETURN store_ids;
END;
/


/** TESTING BLOCK **/
DECLARE
    product_ids array_ids;
BEGIN
    product_ids := getStoreIDs();
    FOR i IN 1 .. product_ids.COUNT LOOP
        dbms_output.put_line(product_ids(i));
    END LOOP;
END;
/
